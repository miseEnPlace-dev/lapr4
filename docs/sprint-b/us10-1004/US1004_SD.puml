@startuml US1004_SD
autonumber

actor "Manager" as M

participant "SetCourseStatusUI" as UI <<presentation>>
participant "SetCourseStatusController" as CTRL <<application>>
participant "CourseListService" as SRV <<service>>
participant "Course" as Course <<domain>>
participant "CourseDTO" as DTO <<dto>>
participant "CourseState" as CourseState <<domain>>


database CourseRepository as REPO <<repository>>

activate M

M -> UI: requests to open/close a course

activate UI

UI -> CTRL**: new(courseRepository)

alt if close course
  UI -> CTRL: courses = listOpenCourses()
  activate CTRL
  CTRL -> SRV: listOpenCourses()
  activate SRV
  SRV -> REPO: findAllOpen()
    activate REPO
    deactivate REPO
  loop for each course
    SRV -> Course : toDTO(course)
    activate Course
    Course -> DTO : new
    deactivate SRV
    deactivate Course
    deactivate CTRL
  end loop
else if open course
  UI -> CTRL: courses = listClosedCourses()
  activate CTRL
  CTRL -> SRV: listClosedCourses()
  activate SRV
  SRV -> REPO: findAllClosed()
  activate REPO
  deactivate REPO
  loop for each course
    SRV -> Course : toDTO(course)
    activate Course
    Course -> DTO : new
    deactivate SRV
    deactivate Course
    deactivate CTRL
  end loop
end

UI --> M: lists the available courses and their status and asks to select one

deactivate UI

M -> UI: selects the desired course

activate UI

UI -> UI: course = select(courses, index)
UI --> M: asks to confirm the toggle of the course status

deactivate UI

M -> UI: confirms operation

activate UI

UI -> CTRL: toggleCourseStatus(course)

activate CTRL

CTRL -> Course: course = toggleState()

activate Course

Course -> CourseState: toggle()

activate CourseState
deactivate CourseState
deactivate Course

CTRL -> REPO: save(course)

activate REPO
deactivate REPO
deactivate CTRL

UI --> M: informs operation success

@enduml

